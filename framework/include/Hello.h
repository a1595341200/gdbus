/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __HELLO_H__
#define __HELLO_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.yft.hello.test */

#define HELLO_TYPE_TEST (hello_test_get_type ())
#define HELLO_TEST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HELLO_TYPE_TEST, helloTest))
#define HELLO_IS_TEST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HELLO_TYPE_TEST))
#define HELLO_TEST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), HELLO_TYPE_TEST, helloTestIface))

struct _helloTest;
typedef struct _helloTest helloTest;
typedef struct _helloTestIface helloTestIface;

struct _helloTestIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_version) (
    helloTest *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_version);

  void (*test_status) (
    helloTest *object,
    gint arg_status);

};

GType hello_test_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *hello_test_interface_info (void);
guint hello_test_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void hello_test_complete_set_version (
    helloTest *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void hello_test_emit_test_status (
    helloTest *object,
    gint arg_status);



/* D-Bus method calls: */
void hello_test_call_set_version (
    helloTest *proxy,
    const gchar *arg_version,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean hello_test_call_set_version_finish (
    helloTest *proxy,
    GAsyncResult *res,
    GError **error);

gboolean hello_test_call_set_version_sync (
    helloTest *proxy,
    const gchar *arg_version,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define HELLO_TYPE_TEST_PROXY (hello_test_proxy_get_type ())
#define HELLO_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HELLO_TYPE_TEST_PROXY, helloTestProxy))
#define HELLO_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HELLO_TYPE_TEST_PROXY, helloTestProxyClass))
#define HELLO_TEST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HELLO_TYPE_TEST_PROXY, helloTestProxyClass))
#define HELLO_IS_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HELLO_TYPE_TEST_PROXY))
#define HELLO_IS_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HELLO_TYPE_TEST_PROXY))

typedef struct _helloTestProxy helloTestProxy;
typedef struct _helloTestProxyClass helloTestProxyClass;
typedef struct _helloTestProxyPrivate helloTestProxyPrivate;

struct _helloTestProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  helloTestProxyPrivate *priv;
};

struct _helloTestProxyClass
{
  GDBusProxyClass parent_class;
};

GType hello_test_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (helloTestProxy, g_object_unref)
#endif

void hello_test_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
helloTest *hello_test_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
helloTest *hello_test_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void hello_test_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
helloTest *hello_test_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
helloTest *hello_test_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define HELLO_TYPE_TEST_SKELETON (hello_test_skeleton_get_type ())
#define HELLO_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), HELLO_TYPE_TEST_SKELETON, helloTestSkeleton))
#define HELLO_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), HELLO_TYPE_TEST_SKELETON, helloTestSkeletonClass))
#define HELLO_TEST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), HELLO_TYPE_TEST_SKELETON, helloTestSkeletonClass))
#define HELLO_IS_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), HELLO_TYPE_TEST_SKELETON))
#define HELLO_IS_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), HELLO_TYPE_TEST_SKELETON))

typedef struct _helloTestSkeleton helloTestSkeleton;
typedef struct _helloTestSkeletonClass helloTestSkeletonClass;
typedef struct _helloTestSkeletonPrivate helloTestSkeletonPrivate;

struct _helloTestSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  helloTestSkeletonPrivate *priv;
};

struct _helloTestSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType hello_test_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (helloTestSkeleton, g_object_unref)
#endif

helloTest *hello_test_skeleton_new (void);


G_END_DECLS

#endif /* __HELLO_H__ */
