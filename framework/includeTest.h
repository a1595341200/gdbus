/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __TEST_H__
#define __TEST_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.yao.xie.gdbus.test */

#define GDBUS_TYPE_TEST (gdbus_test_get_type ())
#define GDBUS_TEST(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_TEST, gdbusTest))
#define GDBUS_IS_TEST(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_TEST))
#define GDBUS_TEST_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDBUS_TYPE_TEST, gdbusTestIface))

struct _gdbusTest;
typedef struct _gdbusTest gdbusTest;
typedef struct _gdbusTestIface gdbusTestIface;

struct _gdbusTestIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_set_name) (
    gdbusTest *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_name);

  void (*test_signal) (
    gdbusTest *object,
    gint arg_status);

};

GType gdbus_test_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdbus_test_interface_info (void);
guint gdbus_test_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdbus_test_complete_set_name (
    gdbusTest *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void gdbus_test_emit_test_signal (
    gdbusTest *object,
    gint arg_status);



/* D-Bus method calls: */
void gdbus_test_call_set_name (
    gdbusTest *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_test_call_set_name_finish (
    gdbusTest *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_test_call_set_name_sync (
    gdbusTest *proxy,
    const gchar *arg_name,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDBUS_TYPE_TEST_PROXY (gdbus_test_proxy_get_type ())
#define GDBUS_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_TEST_PROXY, gdbusTestProxy))
#define GDBUS_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDBUS_TYPE_TEST_PROXY, gdbusTestProxyClass))
#define GDBUS_TEST_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDBUS_TYPE_TEST_PROXY, gdbusTestProxyClass))
#define GDBUS_IS_TEST_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_TEST_PROXY))
#define GDBUS_IS_TEST_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDBUS_TYPE_TEST_PROXY))

typedef struct _gdbusTestProxy gdbusTestProxy;
typedef struct _gdbusTestProxyClass gdbusTestProxyClass;
typedef struct _gdbusTestProxyPrivate gdbusTestProxyPrivate;

struct _gdbusTestProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  gdbusTestProxyPrivate *priv;
};

struct _gdbusTestProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdbus_test_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (gdbusTestProxy, g_object_unref)
#endif

void gdbus_test_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
gdbusTest *gdbus_test_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
gdbusTest *gdbus_test_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdbus_test_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
gdbusTest *gdbus_test_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
gdbusTest *gdbus_test_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDBUS_TYPE_TEST_SKELETON (gdbus_test_skeleton_get_type ())
#define GDBUS_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_TEST_SKELETON, gdbusTestSkeleton))
#define GDBUS_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDBUS_TYPE_TEST_SKELETON, gdbusTestSkeletonClass))
#define GDBUS_TEST_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDBUS_TYPE_TEST_SKELETON, gdbusTestSkeletonClass))
#define GDBUS_IS_TEST_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_TEST_SKELETON))
#define GDBUS_IS_TEST_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDBUS_TYPE_TEST_SKELETON))

typedef struct _gdbusTestSkeleton gdbusTestSkeleton;
typedef struct _gdbusTestSkeletonClass gdbusTestSkeletonClass;
typedef struct _gdbusTestSkeletonPrivate gdbusTestSkeletonPrivate;

struct _gdbusTestSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  gdbusTestSkeletonPrivate *priv;
};

struct _gdbusTestSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdbus_test_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (gdbusTestSkeleton, g_object_unref)
#endif

gdbusTest *gdbus_test_skeleton_new (void);


G_END_DECLS

#endif /* __TEST_H__ */
